[
     {
          "algorithm": "\nThe algorithm selects the next node by calculating a weighted average of distances from the current node to all unvisited nodes based on the three distance matrices, with different weights assigned to each distance matrix to prioritize minimizing each cost metric simultaneously.\n",
          "code": "import numpy as np\n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix_1, distance_matrix_2, distance_matrix_3):\n    weights = np.array([0.5, 0.3, 0.2]) # Assign weights to each distance matrix\n    cost_matrix = weights[0]*distance_matrix_1[current_node] + weights[1]*distance_matrix_2[current_node] + weights[2]*distance_matrix_3[current_node]\n    min_cost = float('inf')\n    next_node = None\n    for node in unvisited_nodes:\n        if cost_matrix[node] < min_cost:\n            min_cost = cost_matrix[node]\n            next_node = node\n    return next_node",
          "objective": [
               11.2935,
               14.65528,
               18.8742
          ],
          "other_inf": null
     },
     {
          "algorithm": "My algorithm selects the next node by comparing the average distances from the current node to each unvisited node in the three distance matrices and choosing the node with the lowest average.}\n\n```python\nimport numpy as np\n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix_1, distance_matrix_2, distance_matrix_3):\n    average_distance = {",
          "code": "import numpy as np\n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix_1, distance_matrix_2, distance_matrix_3):\n    average_distance = {}\n    for node in unvisited_nodes:\n        avg_distance = (distance_matrix_1[current_node][node] + distance_matrix_2[current_node][node] + distance_matrix_3[current_node][node]) / 3\n        average_distance[node] = avg_distance\n    next_node = min(average_distance, key=average_distance.get)\n    return next_node",
          "objective": [
               14.7973,
               14.6659,
               14.0594
          ],
          "other_inf": null
     },
     {
          "algorithm": "\n\nThe new algorithm involves randomly shuffling the unvisited nodes and selecting the node which is closest to the current node based on the first distance matrix among the shuffled nodes.\n\n",
          "code": "import numpy as np\n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix_1, distance_matrix_2, distance_matrix_3):\n    np.random.shuffle(unvisited_nodes)\n    min_distance = float('inf')\n    next_node = None\n    for node in unvisited_nodes:\n        if distance_matrix_1[current_node][node] < min_distance:\n            min_distance = distance_matrix_1[current_node][node]\n            next_node = node\n    return next_node",
          "objective": [
               6.5366,
               26.36118,
               26.76374
          ],
          "other_inf": null
     },
     {
          "algorithm": "",
          "code": "import numpy as np\n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix_1, distance_matrix_2, distance_matrix_3):\n    weights = np.array([1, 1, 1])  # Initial weights for distance matrices\n\n    distances = np.zeros(len(unvisited_nodes))\n    for i, node in enumerate(unvisited_nodes):\n        distances[i] = distance_matrix_1[current_node][node] + distance_matrix_2[current_node][node] + distance_matrix_3[current_node][node]\n\n    next_node = unvisited_nodes[np.argmin(distances)]\n    return next_node",
          "objective": [
               14.7973,
               14.6659,
               14.0594
          ],
          "other_inf": null
     },
     {
          "algorithm": "\nMy algorithm selects the next node by calculating a combined cost metric for each unvisited node, which is the sum of the distances from the current node to the unvisited node in each of the three distance matrices, and then choosing the unvisited node with the lowest combined cost.\n}\n\n```python\nimport numpy as np\n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix_1, distance_matrix_2, distance_matrix_3):\n    combined_cost = {",
          "code": "import numpy as np\n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix_1, distance_matrix_2, distance_matrix_3):\n    combined_cost = {}\n    for node in unvisited_nodes:\n        cost = distance_matrix_1[current_node][node] + distance_matrix_2[current_node][node] + distance_matrix_3[current_node][node]\n        combined_cost[node] = cost\n    next_node = min(combined_cost, key=combined_cost.get)\n    return next_node",
          "objective": [
               14.7973,
               14.6659,
               14.0594
          ],
          "other_inf": null
     },
     {
          "algorithm": "\nMy algorithm selects the next node based on a weighted combination of distances from the current node to each unvisited node using all three distance matrices, where the weights are dynamically adjusted based on the distances, aiming to balance the minimization of all three cost metrics simultaneously.\n",
          "code": "import numpy as np\n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix_1, distance_matrix_2, distance_matrix_3):\n    weights = np.array([1, 1, 1])  # Initial weights for distance matrices\n\n    distances = np.zeros(len(unvisited_nodes))\n    for i, node in enumerate(unvisited_nodes):\n        distances[i] = weights[0]*distance_matrix_1[current_node][node] + weights[1]*distance_matrix_2[current_node][node] + weights[2]*distance_matrix_3[current_node][node]\n\n    next_node = unvisited_nodes[np.argmin(distances)]\n    return next_node",
          "objective": [
               14.7973,
               14.6659,
               14.0594
          ],
          "other_inf": null
     },
     {
          "algorithm": "\nMy algorithm aims to select the next node by evaluating the cumulative cost function considering all three distance matrices simultaneously and prioritizing the node that minimizes the sum of the three distances. In case of a tie, it selects the node with the smallest ID.\n",
          "code": "import numpy as np\n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix_1, distance_matrix_2, distance_matrix_3):\n    min_cost = float('inf')\n    next_node = None\n    \n    for node in unvisited_nodes:\n        cost = distance_matrix_1[current_node][node] + distance_matrix_2[current_node][node] + distance_matrix_3[current_node][node]\n        \n        if cost < min_cost:\n            min_cost = cost\n            next_node = node\n        elif cost == min_cost:\n            next_node = min(next_node, node)\n    \n    return next_node",
          "objective": [
               14.7973,
               14.6659,
               14.0594
          ],
          "other_inf": null
     },
     {
          "algorithm": "\nMy new algorithm involves calculating the combined cost of reaching each unvisited node from the current node based on all three distance matrices, and selecting the node with the minimum combined cost as the next node.\n",
          "code": "import numpy as np\n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix_1, distance_matrix_2, distance_matrix_3):\n    min_combined_cost = float('inf')\n    next_node = None\n    \n    for node in unvisited_nodes:\n        cost = distance_matrix_1[current_node][node] + distance_matrix_2[current_node][node] + distance_matrix_3[current_node][node]\n        \n        if cost < min_combined_cost:\n            min_combined_cost = cost\n            next_node = node\n    \n    return next_node",
          "objective": [
               14.7973,
               14.6659,
               14.0594
          ],
          "other_inf": null
     },
     {
          "algorithm": "\nMy novel algorithm involves calculating a combined cost for each unvisited node by combining the three distance matrices and selecting the node with the minimum combined cost in each step.\n",
          "code": "import numpy as np\n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix_1, distance_matrix_2, distance_matrix_3):\n    combined_cost = []\n    \n    for node in unvisited_nodes:\n        cost = distance_matrix_1[current_node][node] + distance_matrix_2[current_node][node] + distance_matrix_3[current_node][node]\n        combined_cost.append(cost)\n    \n    next_node = unvisited_nodes[np.argmin(combined_cost)]\n    \n    return next_node",
          "objective": [
               14.7973,
               14.6659,
               14.0594
          ],
          "other_inf": null
     },
     {
          "algorithm": "My algorithm selects the next node by randomly shuffling the unvisited nodes and selecting the first node that results in lower distances from the current node using all three distance matrices.",
          "code": "import numpy as np\n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix_1, distance_matrix_2, distance_matrix_3):\n    np.random.shuffle(unvisited_nodes)\n    \n    min_distance = float('inf')\n    next_node = None\n    \n    for node in unvisited_nodes:\n        distance = distance_matrix_1[current_node][node] + distance_matrix_2[current_node][node] + distance_matrix_3[current_node][node]\n        \n        if distance < min_distance:\n            min_distance = distance\n            next_node = node\n            \n    return next_node",
          "objective": [
               14.7973,
               14.6659,
               14.0594
          ],
          "other_inf": null
     }
]