{
     "algorithm": "\nThe algorithm selects the next node by calculating a weighted average of distances from the current node to all unvisited nodes based on the three distance matrices, with different weights assigned to each distance matrix to prioritize minimizing each cost metric simultaneously.\n",
     "code": "import numpy as np\n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix_1, distance_matrix_2, distance_matrix_3):\n    weights = np.array([0.5, 0.3, 0.2]) # Assign weights to each distance matrix\n    cost_matrix = weights[0]*distance_matrix_1[current_node] + weights[1]*distance_matrix_2[current_node] + weights[2]*distance_matrix_3[current_node]\n    min_cost = float('inf')\n    next_node = None\n    for node in unvisited_nodes:\n        if cost_matrix[node] < min_cost:\n            min_cost = cost_matrix[node]\n            next_node = node\n    return next_node",
     "objective": [
          11.2935,
          14.65528,
          18.8742
     ],
     "other_inf": null
}